// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Library should render 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Library
    classes={
      Object {
        "list": "classes.list",
      }
    }
    closeDrawer={[MockFunction]}
    loadedLibrary="./"
    open={true}
    openComic={[MockFunction]}
    saveContentDataToMain={[MockFunction]}
    style={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <WithStyles(Drawer)
        PaperProps={
          Object {
            "style": Object {
              "borderRadius": "0px 0px 0px 15px",
              "margin": "auto",
              "maxWidth": "960px",
            },
          }
        }
        anchor="top"
        onClose={[MockFunction]}
        open={true}
        transitionDuration={125}
        variant="temporary"
      >
        <div
          onKeyDown={[MockFunction]}
          role="button"
          tabIndex={0}
        >
          <LibraryLayout
            className="classes.list"
            closeLibrary={[MockFunction]}
            openComic={[MockFunction]}
            root="./"
            saveContentDataToParent={[MockFunction]}
            updateRoot={[MockFunction]}
          />
        </div>
      </WithStyles(Drawer)>,
      "className": "Library",
      "style": Object {},
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "PaperProps": Object {
          "style": Object {
            "borderRadius": "0px 0px 0px 15px",
            "margin": "auto",
            "maxWidth": "960px",
          },
        },
        "anchor": "top",
        "children": <div
          onKeyDown={[MockFunction]}
          role="button"
          tabIndex={0}
        >
          <LibraryLayout
            className="classes.list"
            closeLibrary={[MockFunction]}
            openComic={[MockFunction]}
            root="./"
            saveContentDataToParent={[MockFunction]}
            updateRoot={[MockFunction]}
          />
        </div>,
        "onClose": [MockFunction],
        "open": true,
        "transitionDuration": 125,
        "variant": "temporary",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <LibraryLayout
            className="classes.list"
            closeLibrary={[MockFunction]}
            openComic={[MockFunction]}
            root="./"
            saveContentDataToParent={[MockFunction]}
            updateRoot={[MockFunction]}
          />,
          "onKeyDown": [MockFunction],
          "role": "button",
          "tabIndex": 0,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "className": "classes.list",
            "closeLibrary": [MockFunction],
            "openComic": [MockFunction],
            "root": "./",
            "saveContentDataToParent": [MockFunction],
            "updateRoot": [MockFunction],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <WithStyles(Drawer)
          PaperProps={
            Object {
              "style": Object {
                "borderRadius": "0px 0px 0px 15px",
                "margin": "auto",
                "maxWidth": "960px",
              },
            }
          }
          anchor="top"
          onClose={[MockFunction]}
          open={true}
          transitionDuration={125}
          variant="temporary"
        >
          <div
            onKeyDown={[MockFunction]}
            role="button"
            tabIndex={0}
          >
            <LibraryLayout
              className="classes.list"
              closeLibrary={[MockFunction]}
              openComic={[MockFunction]}
              root="./"
              saveContentDataToParent={[MockFunction]}
              updateRoot={[MockFunction]}
            />
          </div>
        </WithStyles(Drawer)>,
        "className": "Library",
        "style": Object {},
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "PaperProps": Object {
            "style": Object {
              "borderRadius": "0px 0px 0px 15px",
              "margin": "auto",
              "maxWidth": "960px",
            },
          },
          "anchor": "top",
          "children": <div
            onKeyDown={[MockFunction]}
            role="button"
            tabIndex={0}
          >
            <LibraryLayout
              className="classes.list"
              closeLibrary={[MockFunction]}
              openComic={[MockFunction]}
              root="./"
              saveContentDataToParent={[MockFunction]}
              updateRoot={[MockFunction]}
            />
          </div>,
          "onClose": [MockFunction],
          "open": true,
          "transitionDuration": 125,
          "variant": "temporary",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <LibraryLayout
              className="classes.list"
              closeLibrary={[MockFunction]}
              openComic={[MockFunction]}
              root="./"
              saveContentDataToParent={[MockFunction]}
              updateRoot={[MockFunction]}
            />,
            "onKeyDown": [MockFunction],
            "role": "button",
            "tabIndex": 0,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "className": "classes.list",
              "closeLibrary": [MockFunction],
              "openComic": [MockFunction],
              "root": "./",
              "saveContentDataToParent": [MockFunction],
              "updateRoot": [MockFunction],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
